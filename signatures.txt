#light





namespace ImageLibrary
  module Operations = begin
    val MakeGray : r:int * g:int * b:int -> int * int * int
    val Grayscale :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
    val ChangeThresholdRGB :
      rgb:'a -> threshold:'a -> depth:int -> int when 'a : comparison
    val ThresholdChange :
      r:'a * g:'a * b:'a -> threshold:'a -> depth:int -> int * int * int
        when 'a : comparison
    val Threshold :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list ->
              threshold:int -> (int * int * int) list list
    val FlipHorizontal :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
    val DiffCalc :
      int * int * int ->
        int * int * int ->
          int * int * int -> thresh:int -> depth:int -> int * int * int
    val HelpEdge :
      h1:(int * int * int) list ->
        h2:(int * int * int) list ->
          thresh:int -> depth:int -> (int * int * int) list
    val EdgeDetect :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list ->
              threshold:int -> (int * int * int) list list
    val RotateRight90 :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
  end

